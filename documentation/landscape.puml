@startuml Solution
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

!$COLOR_A_5 = "#7f3b08"
!$COLOR_A_4 = "#b35806"
!$COLOR_A_3 = "#e08214"
!$COLOR_A_2 = "#fdb863"
!$COLOR_A_1 = "#fee0b6"
!$COLOR_NEUTRAL = "#f7f7f7"
!$COLOR_B_1 = "#d8daeb"
!$COLOR_B_2 = "#b2abd2"
!$COLOR_B_3 = "#8073ac"
!$COLOR_B_4 = "#542788"
!$COLOR_B_5 = "#2d004b"
!$COLOR_REL_LINE = "#8073ac"
!$COLOR_REL_TEXT = "#8073ac"


!$ICONURL = "https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/v3.0.0/icons"
!include $ICONURL/common.puml
!include $ICONURL/devicons/mysql.puml
!include $ICONURL/devicons2/rabbitmq_original.puml
!include $ICONURL/devicons/dotnet.puml

title Solution Overview

Person(user, "Tweeter")

Container_Boundary(apigateway, "API Gateway"){
    Container(gatewaycontainer,"API Gateway", "Ocelot", "Orchestrates users interaction with API's")
}

Container_Boundary(usercontainer, "User Container"){
    Container(userservice, "User Service", "C#/api", "Serves users needs", $sprite=dotnet)
    ContainerDb(userdb, "User database", "MySQL", "Persists user data", $sprite=mysql)
}

Container_Boundary(tweetcontainer, "Tweet Container"){
    Container(tweetservice, "Tweet Service", "C#/api", "Handles tweets", $sprite=dotnet)
    ContainerDb(tweetdb, "Tweet database", "MySQL", "Persists Tweet data", $sprite=mysql)
}

ContainerQueue(messagequeue, "Message Queue", "RabbitMQ", "Communicates between services", $sprite=rabbitmq_original)



BiRel_D(user, apigateway, "Interacts", "HTTP")
BiRel_D(apigateway, userservice, "Queryes", "HTTP")
BiRel_D(apigateway, tweetservice, "Queryes", "HTTP")
Rel_D(userservice, userdb, "Handles user data", "EntityFramework")
BiRel_R(userservice, messagequeue, "Communicates", "AMQP")
BiRel_R(messagequeue, tweetservice, "Communicates", "AMQP")
Rel_R(tweetservice, tweetdb, "Handles Tweets", "EntityFramework")
@enduml